diff --git a/catalyst/targets/livecd_stage2_target.py b/catalyst/targets/livecd_stage2_target.py
index 1bfd820..57c0fba 100644
--- a/catalyst/targets/livecd_stage2_target.py
+++ b/catalyst/targets/livecd_stage2_target.py
@@ -75,59 +75,59 @@ class livecd_stage2_target(generic_stage_target):
 				myf.write("\nblacklist "+x)
 			myf.close()
 
-	def unpack(self):
-		unpack=True
-		display_msg=None
-
-		clst_unpack_hash=read_from_clst(self.settings["autoresume_path"]+"unpack")
-
-		if os.path.isdir(self.settings["source_path"]):
-			unpack_cmd="rsync -a --delete "+self.settings["source_path"]+" "+self.settings["chroot_path"]
-			display_msg="\nStarting rsync from "+self.settings["source_path"]+"\nto "+\
-				self.settings["chroot_path"]+" (This may take some time) ...\n"
-			error_msg="Rsync of "+self.settings["source_path"]+" to "+self.settings["chroot_path"]+" failed."
-			invalid_snapshot=False
-
-		if "AUTORESUME" in self.settings:
-			if os.path.isdir(self.settings["source_path"]) and \
-				os.path.exists(self.settings["autoresume_path"]+"unpack"):
-				print "Resume point detected, skipping unpack operation..."
-				unpack=False
-			elif "source_path_hash" in self.settings:
-				if self.settings["source_path_hash"] != clst_unpack_hash:
-					invalid_snapshot=True
-
-		if unpack:
-			self.mount_safety_check()
-			if invalid_snapshot:
-				print "No Valid Resume point detected, cleaning up  ..."
-				#os.remove(self.settings["autoresume_path"]+"dir_setup")
-				self.clear_autoresume()
-				self.clear_chroot()
-				#self.dir_setup()
-
-			if not os.path.exists(self.settings["chroot_path"]):
-				os.makedirs(self.settings["chroot_path"])
-
-			if not os.path.exists(self.settings["chroot_path"]+"/tmp"):
-				os.makedirs(self.settings["chroot_path"]+"/tmp",1777)
-
-			if "PKGCACHE" in self.settings:
-				if not os.path.exists(self.settings["pkgcache_path"]):
-					os.makedirs(self.settings["pkgcache_path"],0755)
-
-			if not display_msg:
-				raise CatalystError,"Could not find appropriate source. Please check the 'source_subpath' setting in the spec file."
-
-			print display_msg
-			cmd(unpack_cmd,error_msg,env=self.env)
-
-			if "source_path_hash" in self.settings:
-				myf=open(self.settings["autoresume_path"]+"unpack","w")
-				myf.write(self.settings["source_path_hash"])
-				myf.close()
-			else:
-				touch(self.settings["autoresume_path"]+"unpack")
+#	def unpack(self):
+#		unpack=True
+#		display_msg=None
+#
+#		clst_unpack_hash=read_from_clst(self.settings["autoresume_path"]+"unpack")
+#
+#		if os.path.isdir(self.settings["source_path"]):
+#			unpack_cmd="rsync -a --delete "+self.settings["source_path"]+" "+self.settings["chroot_path"]
+#			display_msg="\nStarting rsync from "+self.settings["source_path"]+"\nto "+\
+#				self.settings["chroot_path"]+" (This may take some time) ...\n"
+#			error_msg="Rsync of "+self.settings["source_path"]+" to "+self.settings["chroot_path"]+" failed."
+#			invalid_snapshot=False
+#
+#		if "AUTORESUME" in self.settings:
+#			if os.path.isdir(self.settings["source_path"]) and \
+#				os.path.exists(self.settings["autoresume_path"]+"unpack"):
+#				print "Resume point detected, skipping unpack operation..."
+#				unpack=False
+#			elif "source_path_hash" in self.settings:
+#				if self.settings["source_path_hash"] != clst_unpack_hash:
+#					invalid_snapshot=True
+#
+#		if unpack:
+#			self.mount_safety_check()
+#			if invalid_snapshot:
+#				print "No Valid Resume point detected, cleaning up  ..."
+#				#os.remove(self.settings["autoresume_path"]+"dir_setup")
+#				self.clear_autoresume()
+#				self.clear_chroot()
+#				#self.dir_setup()
+#
+#			if not os.path.exists(self.settings["chroot_path"]):
+#				os.makedirs(self.settings["chroot_path"])
+#
+#			if not os.path.exists(self.settings["chroot_path"]+"/tmp"):
+#				os.makedirs(self.settings["chroot_path"]+"/tmp",1777)
+#
+#			if "PKGCACHE" in self.settings:
+#				if not os.path.exists(self.settings["pkgcache_path"]):
+#					os.makedirs(self.settings["pkgcache_path"],0755)
+#
+#			if not display_msg:
+#				raise CatalystError,"Could not find appropriate source. Please check the 'source_subpath' setting in the spec file."
+#
+#			print display_msg
+#			cmd(unpack_cmd,error_msg,env=self.env)
+#
+#			if "source_path_hash" in self.settings:
+#				myf=open(self.settings["autoresume_path"]+"unpack","w")
+#				myf.write(self.settings["source_path_hash"])
+#				myf.close()
+#			else:
+#				touch(self.settings["autoresume_path"]+"unpack")
 
 	def set_action_sequence(self):
 		self.settings["action_sequence"]=["unpack","unpack_snapshot",\
