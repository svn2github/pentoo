find correct branch from http://sourceforge.net/p/aufs/aufs3-standalone/ref/master/branches/

git clone git://git.code.sf.net/p/aufs/aufs3-standalone aufs-aufs3-standalone
git checkout origin/aufs3.x (where x is the desired branch)

NOTE: I have no idea how to update in this state, I rm -rf the whole thing and start over each time

- apply ./aufs3-kbuild.patch
- apply ./aufs3-base.patch
- apply ./aufs3-mmap.patch
- apply ./aufs3-standalone.patch
- copy ./{Documentation,fs,include/uapi/linux/aufs_type.h} files to your
  kernel source tree. Never copy ./include/uapi/linux/Kbuild.

steal latest pax patch from gentoo's aufs ebuild, set for USE=pax_kernel


As of 3.13.7 (at least) aufs and grsec collides, here's the changes made to aufs:

--- a/aufs3-mmap.patch
+++ b/aufs3-mmap.patch
@@ -165,9 +165,9 @@ index 3552717..3c5a972 100644
 +#define vma_get_file(vma)		vma_do_get_file(vma, __func__, __LINE__)
 +#define vma_fput(vma)			vma_do_fput(vma, __func__, __LINE__)
 +
- extern int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write);
- extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
- 		void *buf, int len, int write);
+ extern ssize_t access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, size_t len, int write);
+ extern ssize_t access_remote_vm(struct mm_struct *mm, unsigned long addr,
+ 		void *buf, size_t len, int write);
 diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
 index 290901a..c21588b 100644
 --- a/include/linux/mm_types.h
@@ -192,15 +192,15 @@ diff --git a/kernel/fork.c b/kernel/fork.c
 index dfa736c..02abdb6 100644
 --- a/kernel/fork.c
 +++ b/kernel/fork.c
-@@ -412,7 +412,7 @@ static int dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)
- 			struct inode *inode = file_inode(file);
- 			struct address_space *mapping = file->f_mapping;
+@@ -379,7 +379,7 @@ static struct vm_area_struct *dup_vma(struct mm_struct *mm, struct mm_struct *oldmm, struct vm_area_struct *mpnt)
+ 		struct inode *inode = file_inode(file);
+ 		struct address_space *mapping = file->f_mapping;
  
--			get_file(file);
-+			vma_get_file(tmp);
- 			if (tmp->vm_flags & VM_DENYWRITE)
- 				atomic_dec(&inode->i_writecount);
- 			mutex_lock(&mapping->i_mmap_mutex);
+-		get_file(file);
++		vma_get_file(tmp);
+ 		if (tmp->vm_flags & VM_DENYWRITE)
+ 			atomic_dec(&inode->i_writecount);
+ 		mutex_lock(&mapping->i_mmap_mutex);
 diff --git a/mm/filemap.c b/mm/filemap.c
 index b7749a9..a6693ca 100644
 --- a/mm/filemap.c
@@ -316,9 +316,9 @@ index 834b2d7..91f5699 100644
  	if (new->vm_file)
 -		fput(new->vm_file);
 +		vma_fput(new);
- 	unlink_anon_vmas(new);
   out_free_mpol:
  	mpol_put(vma_policy(new));
+  out_free_vma:
 @@ -2827,7 +2827,7 @@ struct vm_area_struct *copy_vma(struct vm_area_struct **vmap,
  			if (anon_vma_clone(new_vma, vma))
  				goto out_free_mempol;

