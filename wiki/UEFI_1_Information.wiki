#summary UEFI: Basic information

= Introduction =

== UEFI ==
[http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface Unified Extensible Firmware Interface (UEFI)] is meant as a replacement for BIOS in Itanium, x86, and x86_64 PCs. The first variant was called Extensible Firmware Interface (EFI), so that abbreviation is also often used.

Most motherboards since early-to-mid 2011 support it. Most or all provide a compatibility mode with legacy BIOS.

== GPT partition layout ==
UEFI supports [http://en.wikipedia.org/wiki/GUID_Partition_Table GOT (GUID Partition Table)]; which is nice - no limitation to 4 primary partitions. It does not even support extended partitions.


= Boot Partition =

The traditional MBR (Master Boot Record, 515 bytes) is replaced by a designated boot-partition. This must have the boot-flag set and must be formatted with FAT16 or FAT32. All boot-loaders are placed in that partition, auto-loading by the EFI firmware should happen from "\EFI\BOOT\BOOTx64.EFI". The boot partition should be the first partiion on a disk.


= Booting through UEFI =

With UEFI, you don't really need GRUB or any bootloader. UEFI can store the boot parameters and boot the kernel directly.<br/>
You can add a new boot option to UEFI directly, using efibootmgr, but ...

== The catch: Chicken-Egg Problem ==
*To communicate with UEFI, the kernel must be booted through UEFI*<br/>
So to use efibootmgr, one must be able to boot though UEFI at least once before!<br/>

So these are the options:
  * The UEFI GUI is nice and configuration is somehow sane. All parameters can be entered.
  * The efi-shell solution works but is ugly.
  * efibootmgr can write to UEFI - but there's the catch!
  * GRUB2 is uefi compatible, see the other articles.
  * Place kernel to fs0:\EFI\Boot\bootx64.efi and hardocde boot params into it (CONFIG_CMDLINE_BOOL).
  * Try booting through UEFI with another distro, then use efibootmgr.
